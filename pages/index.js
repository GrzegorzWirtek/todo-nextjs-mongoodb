import Head from 'next/head';
import { connectMongoDB } from '@/libs/mongodb/Connect';
import TaskModel from '@/libs/mongodb/TaskModel';
import Task from '@/components/Task';
import { useState } from 'react';
import deleteTask from '@/utils/deleteTask';
import getTasks from '@/utils/getTasks';
import addTask from '@/utils/addTask';
import AddForm from '@/components/AddForm';
import ConfirmPopup from '@/components/ConfirmPopup.js';
import Spinner from '@/components/Spinner';

export default function Home({ tasksData }) {
	const [tasks, setTasks] = useState(tasksData);
	const [confirmPopup, setConfirmPopup] = useState(false);
	const [deleteTaskId, setDeleteTaskId] = useState(null);
	const [spinnerVisible, setSpinnerVisible] = useState(false);

	const deleteOneTask = async () => {
		setSpinnerVisible(true);
		const res = await deleteTask(deleteTaskId);
		if (!res) return;
		const tasks = await getTasks();
		setTasks(tasks);
		setConfirmPopup(false);
		setDeleteTaskId(null);
		setSpinnerVisible(false);
	};

	const cancelDelete = () => {
		setConfirmPopup(false);
		setDeleteTaskId(null);
	};

	const handleDelete = (_id) => {
		setConfirmPopup(true);
		setDeleteTaskId(_id);
	};

	const addNewTask = async (taskData) => {
		setSpinnerVisible(true);
		const res = await addTask(taskData);
		if (!res) return;
		const tasks = await getTasks();
		setTasks(tasks);
		setSpinnerVisible(false);
	};

	return (
		<>
			<Head>
				<title>Todo Next and Mongoose app</title>
				<meta
					name='description'
					content='A todo application that uses the MngoDB Atlas database, generated by create next app'
				/>
				<meta name='viewport' content='width=device-width, initial-scale=1' />
				<link rel='icon' href='/favicon.ico' />
			</Head>
			<main>
				{spinnerVisible && <Spinner />}
				{confirmPopup && (
					<ConfirmPopup
						title='Are you sure you want to delete this task?'
						option1={'Cancel'}
						option2={'Delete'}
						handleOption1={cancelDelete}
						handleOption2={deleteOneTask}
					/>
				)}
				<h1>This is home</h1>
				<AddForm addNewTask={addNewTask} />
				{tasks &&
					tasks.map((task) => (
						<Task key={task._id} data={task} handleDelete={handleDelete} />
					))}
			</main>
		</>
	);
}

export async function getServerSideProps() {
	await connectMongoDB();
	const data = await TaskModel.find();
	const tasksData = JSON.parse(JSON.stringify(data));

	return {
		props: {
			tasksData,
		},
	};
}
